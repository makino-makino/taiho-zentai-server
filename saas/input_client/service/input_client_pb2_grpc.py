# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import saas.input_client.service.input_client_pb2 as input__client__pb2


class InputClientStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.gen_key = channel.unary_unary(
                '/InputClient/gen_key',
                request_serializer=input__client__pb2.NoParam.SerializeToString,
                response_deserializer=input__client__pb2.NoParam.FromString,
                )
        self.predict = channel.unary_unary(
                '/InputClient/predict',
                request_serializer=input__client__pb2.Tensor.SerializeToString,
                response_deserializer=input__client__pb2.Tensor.FromString,
                )
        self.get_time_stats = channel.unary_unary(
                '/InputClient/get_time_stats',
                request_serializer=input__client__pb2.NoParam.SerializeToString,
                response_deserializer=input__client__pb2.Tensor.FromString,
                )


class InputClientServicer(object):
    """Missing associated documentation comment in .proto file"""

    def gen_key(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def predict(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_time_stats(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InputClientServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'gen_key': grpc.unary_unary_rpc_method_handler(
                    servicer.gen_key,
                    request_deserializer=input__client__pb2.NoParam.FromString,
                    response_serializer=input__client__pb2.NoParam.SerializeToString,
            ),
            'predict': grpc.unary_unary_rpc_method_handler(
                    servicer.predict,
                    request_deserializer=input__client__pb2.Tensor.FromString,
                    response_serializer=input__client__pb2.Tensor.SerializeToString,
            ),
            'get_time_stats': grpc.unary_unary_rpc_method_handler(
                    servicer.get_time_stats,
                    request_deserializer=input__client__pb2.NoParam.FromString,
                    response_serializer=input__client__pb2.Tensor.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'InputClient', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class InputClient(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def gen_key(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/InputClient/gen_key',
            input__client__pb2.NoParam.SerializeToString,
            input__client__pb2.NoParam.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def predict(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/InputClient/predict',
            input__client__pb2.Tensor.SerializeToString,
            input__client__pb2.Tensor.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_time_stats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/InputClient/get_time_stats',
            input__client__pb2.NoParam.SerializeToString,
            input__client__pb2.Tensor.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
