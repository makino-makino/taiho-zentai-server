# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import saas.input_client.service.input_client_pb2 as input__client__pb2
import saas.model_client.service.model_client_pb2 as model__client__pb2


class ModelClientStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.transfer_enc_services = channel.unary_unary(
                '/ModelClient/transfer_enc_services',
                request_serializer=input__client__pb2.EncServicesEncoded.SerializeToString,
                response_deserializer=input__client__pb2.NoParam.FromString,
                )
        self.upload_model = channel.unary_unary(
                '/ModelClient/upload_model',
                request_serializer=input__client__pb2.BinModel.SerializeToString,
                response_deserializer=input__client__pb2.NoParam.FromString,
                )
        self.compile_model_from_local_h5 = channel.unary_unary(
                '/ModelClient/compile_model_from_local_h5',
                request_serializer=model__client__pb2.ModelInfo.SerializeToString,
                response_deserializer=input__client__pb2.NoParam.FromString,
                )
        self.compile_model_from_local_pkl = channel.unary_unary(
                '/ModelClient/compile_model_from_local_pkl',
                request_serializer=model__client__pb2.ModelInfo.SerializeToString,
                response_deserializer=input__client__pb2.NoParam.FromString,
                )
        self.compile_model_from_binary_sklearn = channel.unary_unary(
                '/ModelClient/compile_model_from_binary_sklearn',
                request_serializer=model__client__pb2.ModelBinarySklearn.SerializeToString,
                response_deserializer=input__client__pb2.NoParam.FromString,
                )
        self.compile_model_from_binary_keras = channel.unary_unary(
                '/ModelClient/compile_model_from_binary_keras',
                request_serializer=model__client__pb2.ModelBinaryKeras.SerializeToString,
                response_deserializer=input__client__pb2.NoParam.FromString,
                )


class ModelClientServicer(object):
    """Missing associated documentation comment in .proto file"""

    def transfer_enc_services(self, request, context):
        """EFFECT:
        1.receive encryption service with pkey from input client
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def upload_model(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def compile_model_from_local_h5(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def compile_model_from_local_pkl(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def compile_model_from_binary_sklearn(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def compile_model_from_binary_keras(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ModelClientServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'transfer_enc_services': grpc.unary_unary_rpc_method_handler(
                    servicer.transfer_enc_services,
                    request_deserializer=input__client__pb2.EncServicesEncoded.FromString,
                    response_serializer=input__client__pb2.NoParam.SerializeToString,
            ),
            'upload_model': grpc.unary_unary_rpc_method_handler(
                    servicer.upload_model,
                    request_deserializer=input__client__pb2.BinModel.FromString,
                    response_serializer=input__client__pb2.NoParam.SerializeToString,
            ),
            'compile_model_from_local_h5': grpc.unary_unary_rpc_method_handler(
                    servicer.compile_model_from_local_h5,
                    request_deserializer=model__client__pb2.ModelInfo.FromString,
                    response_serializer=input__client__pb2.NoParam.SerializeToString,
            ),
            'compile_model_from_local_pkl': grpc.unary_unary_rpc_method_handler(
                    servicer.compile_model_from_local_pkl,
                    request_deserializer=model__client__pb2.ModelInfo.FromString,
                    response_serializer=input__client__pb2.NoParam.SerializeToString,
            ),
            'compile_model_from_binary_sklearn': grpc.unary_unary_rpc_method_handler(
                    servicer.compile_model_from_binary_sklearn,
                    request_deserializer=model__client__pb2.ModelBinarySklearn.FromString,
                    response_serializer=input__client__pb2.NoParam.SerializeToString,
            ),
            'compile_model_from_binary_keras': grpc.unary_unary_rpc_method_handler(
                    servicer.compile_model_from_binary_keras,
                    request_deserializer=model__client__pb2.ModelBinaryKeras.FromString,
                    response_serializer=input__client__pb2.NoParam.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ModelClient', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ModelClient(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def transfer_enc_services(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelClient/transfer_enc_services',
            input__client__pb2.EncServicesEncoded.SerializeToString,
            input__client__pb2.NoParam.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def upload_model(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelClient/upload_model',
            input__client__pb2.BinModel.SerializeToString,
            input__client__pb2.NoParam.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def compile_model_from_local_h5(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelClient/compile_model_from_local_h5',
            model__client__pb2.ModelInfo.SerializeToString,
            input__client__pb2.NoParam.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def compile_model_from_local_pkl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelClient/compile_model_from_local_pkl',
            model__client__pb2.ModelInfo.SerializeToString,
            input__client__pb2.NoParam.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def compile_model_from_binary_sklearn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelClient/compile_model_from_binary_sklearn',
            model__client__pb2.ModelBinarySklearn.SerializeToString,
            input__client__pb2.NoParam.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def compile_model_from_binary_keras(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelClient/compile_model_from_binary_keras',
            model__client__pb2.ModelBinaryKeras.SerializeToString,
            input__client__pb2.NoParam.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
